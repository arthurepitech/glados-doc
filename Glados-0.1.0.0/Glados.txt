-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package Glados
@version 0.1.0.0

module Common.Types
data SExpr
SInt :: Integer -> SExpr
SBool :: Bool -> SExpr
SString :: String -> SExpr
SSymbol :: String -> SExpr
SList :: [SExpr] -> SExpr
data Expr
Number :: Integer -> Expr
Boolean :: Bool -> Expr
StringLiteral :: String -> Expr
Symbol :: String -> Expr
List :: [Expr] -> Expr
Quote :: Expr -> Expr
Define :: String -> Expr -> Expr
Lambda :: [String] -> Expr -> Expr
If :: Expr -> Expr -> Expr -> Expr
Call :: Expr -> [Expr] -> Expr
QuotedList :: [Expr] -> Expr
data TypeError
TypeMismatch :: String -> String -> TypeError
UnboundVariable :: String -> TypeError
DivisionByZero :: TypeError
EmptyList :: TypeError
NotAFunction :: String -> TypeError
InvalidArguments :: String -> TypeError
InvalidExpression :: String -> TypeError
Default :: String -> TypeError
data Value
IntVal :: Integer -> Value
BoolVal :: Bool -> Value
StringVal :: String -> Value
SymbolVal :: String -> Value
ListVal :: [Value] -> Value
FuncVal :: [String] -> Expr -> Env -> Value
PrimFunc :: ([Value] -> Eval Value) -> Value
NullVal :: Value
type Env = IORef (Map String Value)
data EvalContext
EvalContext :: Env -> Int -> EvalContext
[envRef] :: EvalContext -> Env
[recursionDepth] :: EvalContext -> Int
type Eval a = ReaderT EvalContext (ExceptT TypeError IO) a
maxRecursionDepth :: Int
getType :: Value -> String

-- | Helper pour les opérations sur les chaînes
isString :: Value -> Bool

-- | Helper pour extraire une chaîne
extractString :: Value -> Either TypeError String
instance GHC.Show.Show Common.Types.SExpr
instance GHC.Classes.Eq Common.Types.SExpr
instance GHC.Show.Show Common.Types.Expr
instance GHC.Classes.Eq Common.Types.Expr
instance GHC.Classes.Eq Common.Types.TypeError
instance GHC.Show.Show Common.Types.Value
instance GHC.Classes.Eq Common.Types.Value
instance GHC.Show.Show Common.Types.TypeError

module Common.Environment.Types

-- | Définit une variable dans l'environnement
defineVar :: String -> Value -> Eval Value

-- | Recherche une variable dans l'environnement
lookupVar :: String -> Eval Value

-- | Crée un environnement vide
emptyEnv :: IO Env

-- | Initialise un environnement avec des primitives
initEnv :: [(String, Value)] -> IO Env
type Env = IORef (Map String Value)
data EvalContext
EvalContext :: Env -> Int -> EvalContext
[envRef] :: EvalContext -> Env
[recursionDepth] :: EvalContext -> Int
type Eval a = ReaderT EvalContext (ExceptT TypeError IO) a

module Common.Primitives

-- | Type représentant une fonction primitive qui prend une liste de
--   valeurs et retourne une valeur dans le contexte Eval
type PrimitiveFunc = [Value] -> Eval Value

-- | Fonction d'initialisation des primitives | Retourne une liste de
--   tuples (nom, fonction) pour toutes les primitives disponibles
initPrimitives :: (Expr -> Eval Value) -> [(String, Value)]

-- | Fonctions utilitaires pour les opérations numériques | Applique une
--   opération binaire sur une liste de valeurs numériques
foldNumericOp :: (Integer -> Integer -> Integer) -> Integer -> [Value] -> Eval Value

-- | Opérations numériques de base | Addition: prend une liste de nombres
--   et retourne leur somme
numericAdd :: PrimitiveFunc

-- | Soustraction: prend une liste de nombres et retourne leur différence
numericSub :: PrimitiveFunc

-- | Multiplication: prend une liste de nombres et retourne leur produit
numericMul :: PrimitiveFunc

-- | Division: divise deux nombres entiers
numericDiv :: PrimitiveFunc

-- | Modulo: retourne le reste de la division de deux nombres
numericMod :: PrimitiveFunc

-- | Opérations de comparaison de base | Égalité: vérifie si deux valeurs
--   sont égales
eq :: PrimitiveFunc

-- | Inférieur: vérifie si le premier nombre est inférieur au second
lessThan :: PrimitiveFunc

-- | Supérieur: vérifie si le premier nombre est supérieur au second
greaterThan :: PrimitiveFunc

-- | Inférieur ou égal: vérifie si le premier nombre est inférieur ou égal
--   au second
lessOrEqual :: PrimitiveFunc

-- | Supérieur ou égal: vérifie si le premier nombre est supérieur ou égal
--   au second
greaterOrEqual :: PrimitiveFunc

-- | Opérations logiques de base | Not: inverse une valeur booléenne
notFunc :: PrimitiveFunc

-- | And: retourne la conjonction de valeurs booléennes
andFunc :: PrimitiveFunc

-- | Or: retourne la disjonction de valeurs booléennes
orFunc :: PrimitiveFunc

-- | Opérations sur les chaînes de base | Concaténation: combine plusieurs
--   chaînes de caractères
stringAppend :: PrimitiveFunc

-- | Longueur: retourne la longueur d'une chaîne
stringLength :: PrimitiveFunc

-- | Primitives pour les opérations sur les listes | List: crée une
--   nouvelle liste
listFunc :: PrimitiveFunc

-- | Car: retourne le premier élément d'une liste
carFunc :: PrimitiveFunc

-- | Cdr: retourne tous les éléments sauf le premier
cdrFunc :: PrimitiveFunc

-- | Cons: ajoute un élément au début d'une liste
consFunc :: PrimitiveFunc

-- | Append: concatène deux listes
appendFunc :: PrimitiveFunc

-- | Length: retourne la longueur d'une liste
lengthFunc :: PrimitiveFunc

-- | Null?: vérifie si une liste est vide
nullFunc :: PrimitiveFunc

-- | List?: vérifie si une valeur est une liste
isListFunc :: PrimitiveFunc

-- | Symbol?: vérifie si une valeur est un symbole
isSymbolFunc :: PrimitiveFunc

-- | Primitives pour les calculs spéciaux | Fact: calcule la factorielle
--   d'un nombre
factFunc :: PrimitiveFunc

-- | Diff: vérifie si deux valeurs sont différentes
diffFunc :: PrimitiveFunc

-- | Make-list: crée une liste de n éléments identiques
makeListFunc :: PrimitiveFunc

-- | Set-car!: modifie le premier élément d'une liste (non autorisé)
setCarFunc :: PrimitiveFunc

module Common.Utils

module Interpreter.Environment

-- | Crée un environnement initialisé avec les primitives
initializeEnv :: (Expr -> Eval Value) -> IO Env

module Interpreter.Evaluator
eval :: Expr -> Eval Value
evalProgram :: [Expr] -> Eval Value
runEval :: Eval Value -> IO (Either TypeError Value)

module Interpreter.Parser

-- | Parser pour un programme complet
parseProgram :: String -> Either ParseError [SExpr]

-- | Parser pour une expression complète
parseExpr :: String -> Either ParseError SExpr

-- | Conversion des S-expressions en expressions
sexprToExpr :: SExpr -> Either String Expr

module Interpreter.Main
main :: IO ()
